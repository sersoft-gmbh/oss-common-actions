name: Latest Swift Version
description: Determines the latest Swift version.

inputs:
  max-supported:
    description: The maximum supported Swift version.
    required: true
  offset:
    description: The offset (backwards) from the latest Swift version. E.g. 1 will return the second latest version. The minimum resulting Swift version is 5.2.
    required: false
    default: '0'
outputs:
  version:
    description: The latest Swift version with the given offset applied.
    value: ${{ steps.determine-version.outputs.swift-version }}
  has-breaking-resolved-file-changes:
    description: Whether the Package.resolved file has breaking changes compared to the max-supported version.
    value: ${{ steps.determine-version.outputs.has-breaking-resolved-file-changes }}

runs:
  using: composite
  steps:
    - name: Apply Offset
      if: ${{ inputs.offset != '0' && inputs.offset != '' }}
      id: apply-offset
      shell: bash
      env:
        BASE_VERSION: ${{ inputs.max-supported }}
        OFFSET: ${{ inputs.offset }}
      run: |
        SWIFT_VERSION=''
        HAS_BREAKING_RESOLVED_FILE_CHANGES='false'
        case "${BASE_VERSION}" in
        '5.10')
          case "${OFFSET}" in
            '1') SWIFT_VERSION='5.9';;
            '2') SWIFT_VERSION='5.8';;
            '3') SWIFT_VERSION='5.7';;
            '4') SWIFT_VERSION='5.6';;
            '5') SWIFT_VERSION='5.5';;
              *) ;;
          esac
          HAS_BREAKING_RESOLVED_FILE_CHANGES='true'
        ;;
        '5.9')
          case "${OFFSET}" in
            '1') SWIFT_VERSION='5.8';;
            '2') SWIFT_VERSION='5.7';;
            '3') SWIFT_VERSION='5.6';;
            '4')
              SWIFT_VERSION='5.5'
              HAS_BREAKING_RESOLVED_FILE_CHANGES='true'
              ;;
              *) ;;
          esac
        ;;
        '5.8')
          case "${OFFSET}" in
            '1') SWIFT_VERSION='5.7';;
            '2') SWIFT_VERSION='5.6';;
            '3')
              SWIFT_VERSION='5.5'
              HAS_BREAKING_RESOLVED_FILE_CHANGES='true'
              ;;
              *) ;;
          esac
        ;;
        '5.7')
          case "${OFFSET}" in
            '1') SWIFT_VERSION='5.6';;
            '2')
              SWIFT_VERSION='5.5'
              HAS_BREAKING_RESOLVED_FILE_CHANGES='true'
              ;;
              *) ;;
          esac
        ;;
        '5.6')
          case "${OFFSET}" in
            '1') SWIFT_VERSION='5.5';;
              *) ;;
          esac
          HAS_BREAKING_RESOLVED_FILE_CHANGES='true'
        ;;
        *) ;;
        esac
        if [ -z "${SWIFT_VERSION}" ]; then
          echo "::error title=Invalid Offset!::Invalid offset ${OFFSET} for Swift version ${BASE_VERSION}"
          exit 1
        else
          echo "adjusted-version=${SWIFT_VERSION}" >> "${GITHUB_OUTPUT}"
          echo "has-breaking-resolved-file-changes=${HAS_BREAKING_RESOLVED_FILE_CHANGES}" >> "${GITHUB_OUTPUT}"
        fi
    - name: Determine Version
      id: determine-version
      shell: bash
      env:
        BASE_VERSION: ${{ inputs.max-supported }}
        OFFSET: ${{ inputs.offset || '0' }}
        ADJUSTED_VERSION: ${{ steps.apply-offset.outputs.adjusted-version }}
        HAS_BREAKING_RESOLVED_FILE_CHANGES: ${{ steps.apply-offset.outputs.has-breaking-resolved-file-changes }}
      run: |
        if [ "${OFFSET}" = '0' ]; then
          echo "swift-version=${BASE_VERSION}" >> "${GITHUB_OUTPUT}"
          echo 'has-breaking-resolved-file-changes=false' >> "${GITHUB_OUTPUT}"
        else
          echo "swift-version=${ADJUSTED_VERSION}" >> "${GITHUB_OUTPUT}"
          echo "has-breaking-resolved-file-changes=${HAS_BREAKING_RESOLVED_FILE_CHANGES}" >> "${GITHUB_OUTPUT}"
        fi
