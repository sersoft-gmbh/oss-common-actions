name: SPM Test Swift Package
description: Tests a Swift package using SPM.

inputs:
  delete-package-resolved-file-before-build:
    description: Whether to delete the Package.resolved file before building.
    required: false
    default: "false"
  use-sudo:
    description: Whether to use sudo for running the tests.
    required: false
    default: "false"
  skip-codecov:
    description: Whether to skip uploading the coverage report to Codecov.
    required: false
    default: "false"
  codecov-token:
    description: The Codecov token to use for uploading the coverage report.
    required: false
  fail-if-codecov-fails:
    description: Whether to fail the action if Codecov fails.
    required: false
    default: "true"

runs:
  using: composite
  steps:
    - uses: sersoft-gmbh/os-version-action@v3
      id: os-version
    - uses: sersoft-gmbh/swift-version-action@v3
      id: swift-version
    # - uses: ConorMacBride/install-package@v1.1.0
    #   with:
    #     brew: zstd
    #     apt: zstd
    #     choco: zstandard
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-${{ steps.os-version.outputs.version }}-spm-${{ steps.swift-version.outputs.version }}-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-${{ steps.os-version.outputs.version }}-spm-${{ steps.swift-version.outputs.version }}-
    - name: Remove Package.resolved file
      if: ${{ inputs.delete-package-resolved-file-before-build == 'true' }}
      shell: bash
      run: rm -f Package.resolved
    - name: Build & Test
      shell: bash
      env:
        USE_SUDO: ${{ inputs.use-sudo || 'false' }}
        RUNNER_DEBUG: ${{ runner.debug }}
      run: |
        SUDO_PREFIX=''
        if [ "${USE_SUDO}" = 'true' ]; then
          SUDO_PREFIX='sudo'
        fi
        VERBOSE_ARG=''
        if [ "${ACTIONS_STEP_DEBUG}" = 'true' ] || [ "${RUNNER_DEBUG}" = '1' ]; then
          VERBOSE_ARG='-v'
        fi
        ${SUDO_PREFIX} swift test ${VERBOSE_ARG} --parallel --enable-code-coverage
    - name: Fix build artifact owner
      if: ${{ inputs.use-sudo == 'true' }}
      shell: bash
      run: |
        if [ -d '.build' ]; then
          sudo chown -R "$(whoami)" '.build'
        fi
        if [ -f 'Package.resolved' ]; then
          sudo chown "$(whoami)" 'Package.resolved'
        fi
    - uses: sersoft-gmbh/swift-coverage-action@v4
      if: ${{ inputs.skip-codecov != 'true' }}
      id: coverage-files
    - name: Workaround for codecov/codecov-action#1731
      if: ${{ inputs.skip-codecov != 'true' && runner.os == 'Linux' }}
      shell: bash
      # We might be running in a container which does not have these tools installed
      run: |
        PACKAGES=()
        if [ -z "$(which curl)" ]; then
          PACKAGES+=('curl')
        fi
        if [ -z "$(which jq)" ]; then
          PACKAGES+=('jq')
        fi
        if [ "${#PACKAGES}" -gt 0 ]; then
          if [ -n "$(which apt-get)" ]; then
            apt-get update --quiet
            apt-get install --assume-yes --no-install-recommends "${PACKAGES[@]}"
          elif [ -n "$(which brew)" ]; then
            brew update
            brew install "${PACKAGES[@]}"
          else
            echo '::error title=Missing dependencies::There are missing codecov dependencies and no suitable package manager was found!'
            exit 1
          fi
        fi
    - uses: codecov/codecov-action@v5
      if: ${{ inputs.skip-codecov != 'true' }}
      with:
        token: ${{ inputs.codecov-token }}
        files: ${{ join(fromJSON(steps.coverage-files.outputs.files), ',') }}
        fail_ci_if_error: ${{ inputs.fail-if-codecov-fails == 'true' }}
    # Necessary for cache action post run not to fail.
    - uses: sersoft-gmbh/oss-common-actions/containers/fix-permissions@main
      with:
        paths: |
          .build
          Package.resolved
